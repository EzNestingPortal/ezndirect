{"version":3,"file":"app/account.chunk.js","sources":["webpack:///./src/main/webapp/app/modules/account/index.tsx","webpack:///./src/main/webapp/app/modules/account/password/password.tsx","webpack:///./src/main/webapp/app/modules/account/settings/settings.tsx"],"sourcesContent":["import React from \"react\";\n\nimport ErrorBoundaryRoute from \"app/shared/error/error-boundary-route\";\n\nimport Settings from \"app/modules/account/settings/settings\";\nimport Password from \"app/modules/account/password/password\";\n\nconst Routes = ({ match }) => (\n  <div>\n    <ErrorBoundaryRoute path={`${match.url}/settings`} component={Settings} />\n    <ErrorBoundaryRoute path={`${match.url}/password`} component={Password} />\n  </div>\n);\n\nexport default Routes;\n","import React from \"react\";\n\nimport { connect } from \"react-redux\";\nimport { AvForm, AvField } from \"availity-reactstrap-validation\";\nimport { Row, Col, Button } from \"reactstrap\";\n\nimport { IRootState } from \"app/shared/reducers\";\nimport { getSession } from \"app/shared/reducers/authentication\";\nimport PasswordStrengthBar from \"app/shared/layout/password/password-strength-bar\";\nimport {\n  savePassword,\n  reset\n} from \"app/modules/account/password/password.reducer\";\n\nexport interface IUserPasswordProps extends StateProps, DispatchProps {}\n\nexport interface IUserPasswordState {\n  password: string;\n}\n\nexport class PasswordPage extends React.Component<\n  IUserPasswordProps,\n  IUserPasswordState\n> {\n  state: IUserPasswordState = {\n    password: \"\"\n  };\n\n  componentDidMount() {\n    this.props.reset();\n    this.props.getSession();\n  }\n\n  componentWillUnmount() {\n    this.props.reset();\n  }\n\n  handleValidSubmit = (event, values) => {\n    this.props.savePassword(values.currentPassword, values.newPassword);\n  };\n\n  updatePassword = event => {\n    this.setState({ password: event.target.value });\n  };\n\n  render() {\n    const { account } = this.props;\n\n    return (\n      <div>\n        <Row className=\"justify-content-center\">\n          <Col md=\"8\">\n            <h2 id=\"password-title\">Password for {account.login}</h2>\n            <AvForm id=\"password-form\" onValidSubmit={this.handleValidSubmit}>\n              <AvField\n                name=\"currentPassword\"\n                label=\"Current password\"\n                placeholder=\"Current password\"\n                type=\"password\"\n                validate={{\n                  required: {\n                    value: true,\n                    errorMessage: \"Your password is required.\"\n                  }\n                }}\n              />\n              <AvField\n                name=\"newPassword\"\n                label=\"New password\"\n                placeholder=\"New password\"\n                type=\"password\"\n                validate={{\n                  required: {\n                    value: true,\n                    errorMessage: \"Your password is required.\"\n                  },\n                  minLength: {\n                    value: 4,\n                    errorMessage:\n                      \"Your password is required to be at least 4 characters.\"\n                  },\n                  maxLength: {\n                    value: 50,\n                    errorMessage:\n                      \"Your password cannot be longer than 50 characters.\"\n                  }\n                }}\n                onChange={this.updatePassword}\n              />\n              <PasswordStrengthBar password={this.state.password} />\n              <AvField\n                name=\"confirmPassword\"\n                label=\"New password confirmation\"\n                placeholder=\"Confirm the new password\"\n                type=\"password\"\n                validate={{\n                  required: {\n                    value: true,\n                    errorMessage: \"Your confirmation password is required.\"\n                  },\n                  minLength: {\n                    value: 4,\n                    errorMessage:\n                      \"Your confirmation password is required to be at least 4 characters.\"\n                  },\n                  maxLength: {\n                    value: 50,\n                    errorMessage:\n                      \"Your confirmation password cannot be longer than 50 characters.\"\n                  },\n                  match: {\n                    value: \"newPassword\",\n                    errorMessage:\n                      \"The password and its confirmation do not match!\"\n                  }\n                }}\n              />\n              <Button color=\"success\" type=\"submit\">\n                Save\n              </Button>\n            </AvForm>\n          </Col>\n        </Row>\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = ({ authentication }: IRootState) => ({\n  account: authentication.account,\n  isAuthenticated: authentication.isAuthenticated\n});\n\nconst mapDispatchToProps = { getSession, savePassword, reset };\n\ntype StateProps = ReturnType<typeof mapStateToProps>;\ntype DispatchProps = typeof mapDispatchToProps;\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(PasswordPage);\n","import React from \"react\";\nimport { Button, Col, Alert, Row } from \"reactstrap\";\nimport { connect } from \"react-redux\";\n\nimport { AvForm, AvField } from \"availity-reactstrap-validation\";\n\nimport { IRootState } from \"app/shared/reducers\";\nimport { getSession } from \"app/shared/reducers/authentication\";\nimport {\n  saveAccountSettings,\n  reset\n} from \"app/modules/account/settings/settings.reducer\";\n\nexport interface IUserSettingsProps extends StateProps, DispatchProps {}\n\nexport interface IUserSettingsState {\n  account: any;\n}\n\nexport class SettingsPage extends React.Component<\n  IUserSettingsProps,\n  IUserSettingsState\n> {\n  componentDidMount() {\n    this.props.getSession();\n  }\n\n  componentWillUnmount() {\n    this.props.reset();\n  }\n\n  handleValidSubmit = (event, values) => {\n    const account = {\n      ...this.props.account,\n      ...values\n    };\n\n    this.props.saveAccountSettings(account);\n    event.persist();\n  };\n\n  render() {\n    const { account } = this.props;\n\n    return (\n      <div>\n        <Row className=\"justify-content-center\">\n          <Col md=\"8\">\n            <h2 id=\"settings-title\">User settings for {account.login}</h2>\n            <AvForm id=\"settings-form\" onValidSubmit={this.handleValidSubmit}>\n              {/* First name */}\n              <AvField\n                className=\"form-control\"\n                name=\"firstName\"\n                label=\"First Name\"\n                id=\"firstName\"\n                placeholder=\"Your first name\"\n                validate={{\n                  required: {\n                    value: true,\n                    errorMessage: \"Your first name is required.\"\n                  },\n                  minLength: {\n                    value: 1,\n                    errorMessage:\n                      \"Your first name is required to be at least 1 character\"\n                  },\n                  maxLength: {\n                    value: 50,\n                    errorMessage:\n                      \"Your first name cannot be longer than 50 characters\"\n                  }\n                }}\n                value={account.firstName}\n              />\n              {/* Last name */}\n              <AvField\n                className=\"form-control\"\n                name=\"lastName\"\n                label=\"Last Name\"\n                id=\"lastName\"\n                placeholder=\"Your last name\"\n                validate={{\n                  required: {\n                    value: true,\n                    errorMessage: \"Your last name is required.\"\n                  },\n                  minLength: {\n                    value: 1,\n                    errorMessage:\n                      \"Your last name is required to be at least 1 character\"\n                  },\n                  maxLength: {\n                    value: 50,\n                    errorMessage:\n                      \"Your last name cannot be longer than 50 characters\"\n                  }\n                }}\n                value={account.lastName}\n              />\n              {/* Email */}\n              <AvField\n                name=\"email\"\n                label=\"Email\"\n                placeholder=\"Your email\"\n                type=\"email\"\n                validate={{\n                  required: {\n                    value: true,\n                    errorMessage: \"Your email is required.\"\n                  },\n                  minLength: {\n                    value: 5,\n                    errorMessage:\n                      \"Your email is required to be at least 5 characters.\"\n                  },\n                  maxLength: {\n                    value: 254,\n                    errorMessage:\n                      \"Your email cannot be longer than 50 characters.\"\n                  }\n                }}\n                value={account.email}\n              />\n              <Button color=\"primary\" type=\"submit\">\n                Save\n              </Button>\n            </AvForm>\n          </Col>\n        </Row>\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = ({ authentication }: IRootState) => ({\n  account: authentication.account,\n  isAuthenticated: authentication.isAuthenticated\n});\n\nconst mapDispatchToProps = { getSession, saveAccountSettings, reset };\n\ntype StateProps = ReturnType<typeof mapStateToProps>;\ntype DispatchProps = typeof mapDispatchToProps;\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(SettingsPage);\n"],"mappings":";;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAEA;AACA;AAEA;AAAA;AAAA;AAEA;AACA;AAHA;AAOA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;AChBA;AAEA;AACA;AACA;AAGA;AACA;AACA;AAWA;AAAA;AAAA;AAAA;AAIA;AACA;AACA;AAWA;AACA;AACA;AAEA;AACA;AACA;;AAmFA;AAlGA;AACA;AACA;AACA;AAEA;AACA;AACA;AAUA;AACA;AAEA;AAEA;AACA;AACA;;AAAA;AACA;AACA;AAMA;AACA;AACA;AACA;AACA;AAEA;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AAGA;AACA;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AAEA;AAQA;AACA;AAAA;;AAEA;AAAA;AAAA;AACA;AACA;AACA;AAHA;AAKA;AAKA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;AC5IA;AACA;AACA;AAEA;AAGA;AACA;AAWA;AAAA;AAAA;AAAA;AAYA;AACA;AAKA;AACA;AACA;;AA8FA;AA9GA;AACA;AACA;AAEA;AACA;AACA;AAYA;AACA;AAEA;AAEA;AACA;AACA;;AAAA;AACA;AAEA;AAOA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AAIA;AAOA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AAIA;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AAGA;AAQA;AACA;AAAA;;AAEA;AAAA;AAAA;AACA;AACA;AACA;AAHA;AAKA;AAKA;AACA;AACA;;;;;;A","sourceRoot":""}