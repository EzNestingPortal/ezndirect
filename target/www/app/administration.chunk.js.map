{"version":3,"file":"app/administration.chunk.js","sources":["webpack:///./src/main/webapp/app/modules/administration/audits/audits.tsx","webpack:///./src/main/webapp/app/modules/administration/configuration/configuration.tsx","webpack:///./src/main/webapp/app/modules/administration/docs/docs.tsx","webpack:///./src/main/webapp/app/modules/administration/health/health-modal.tsx","webpack:///./src/main/webapp/app/modules/administration/health/health.tsx","webpack:///./src/main/webapp/app/modules/administration/index.tsx","webpack:///./src/main/webapp/app/modules/administration/logs/logs.tsx","webpack:///./src/main/webapp/app/modules/administration/metrics/metrics-modal.tsx","webpack:///./src/main/webapp/app/modules/administration/metrics/metrics.tsx","webpack:///./src/main/webapp/app/modules/administration/metrics/thread-item.tsx","webpack:///./src/main/webapp/app/modules/administration/user-management/index.tsx","webpack:///./src/main/webapp/app/modules/administration/user-management/user-management-delete-dialog.tsx","webpack:///./src/main/webapp/app/modules/administration/user-management/user-management-detail.tsx","webpack:///./src/main/webapp/app/modules/administration/user-management/user-management-update.tsx","webpack:///./src/main/webapp/app/modules/administration/user-management/user-management.tsx","webpack:///./src/main/webapp/app/shared/util/pagination.constants.ts"],"sourcesContent":["import React from \"react\";\nimport { connect } from \"react-redux\";\nimport { RouteComponentProps } from \"react-router\";\nimport { Input, Row, Table } from \"reactstrap\";\nimport {\n  TextFormat,\n  JhiPagination,\n  getPaginationItemsNumber,\n  getSortState,\n  IPaginationBaseState\n} from \"react-jhipster\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\n\nimport { APP_TIMESTAMP_FORMAT } from \"app/config/constants\";\nimport { ITEMS_PER_PAGE } from \"app/shared/util/pagination.constants\";\n\nimport { IRootState } from \"app/shared/reducers\";\nimport { getAudits } from \"app/modules/administration/administration.reducer\";\n\nexport interface IAuditsPageProps\n  extends StateProps,\n    DispatchProps,\n    RouteComponentProps<{}> {}\n\nexport interface IAuditsPageState extends IPaginationBaseState {\n  fromDate: string;\n  toDate: string;\n}\n\nconst previousMonth = (): string => {\n  const now: Date = new Date();\n  const fromDate =\n    now.getMonth() === 0\n      ? new Date(now.getFullYear() - 1, 11, now.getDate())\n      : new Date(now.getFullYear(), now.getMonth() - 1, now.getDate());\n  return fromDate.toISOString().slice(0, 10);\n};\n\nconst today = (): string => {\n  // Today + 1 day - needed if the current day must be included\n  const day: Date = new Date();\n  day.setDate(day.getDate() + 1);\n  const toDate = new Date(day.getFullYear(), day.getMonth(), day.getDate());\n  return toDate.toISOString().slice(0, 10);\n};\n\nexport class AuditsPage extends React.Component<\n  IAuditsPageProps,\n  IAuditsPageState\n> {\n  state: IAuditsPageState = {\n    ...getSortState(this.props.location, ITEMS_PER_PAGE),\n    fromDate: previousMonth(),\n    toDate: today()\n  };\n\n  componentDidMount() {\n    this.getAudits();\n  }\n\n  onChangeFromDate = evt => {\n    this.setState(\n      {\n        fromDate: evt.target.value\n      },\n      () => this.getAudits()\n    );\n  };\n  onChangeToDate = evt => {\n    this.setState(\n      {\n        toDate: evt.target.value\n      },\n      () => this.getAudits()\n    );\n  };\n\n  sort = prop => () => {\n    this.setState(\n      {\n        order: this.state.order === \"asc\" ? \"desc\" : \"asc\",\n        sort: prop\n      },\n      () => this.transition()\n    );\n  };\n\n  transition = () => {\n    this.getAudits();\n    this.props.history.push(\n      `${this.props.location.pathname}?page=${this.state.activePage}&sort=${\n        this.state.sort\n      },${this.state.order}`\n    );\n  };\n\n  handlePagination = activePage =>\n    this.setState({ activePage }, () => this.transition());\n\n  getAudits = () => {\n    const {\n      activePage,\n      itemsPerPage,\n      sort,\n      order,\n      fromDate,\n      toDate\n    } = this.state;\n    this.props.getAudits(\n      activePage - 1,\n      itemsPerPage,\n      `${sort},${order}`,\n      fromDate,\n      toDate\n    );\n  };\n\n  render() {\n    const { audits, totalItems } = this.props;\n    const { fromDate, toDate } = this.state;\n    return (\n      <div>\n        <h2 className=\"audits-page-heading\">Audits</h2>\n        <span>from</span>\n        <Input\n          type=\"date\"\n          value={fromDate}\n          onChange={this.onChangeFromDate}\n          name=\"fromDate\"\n          id=\"fromDate\"\n        />\n        <span>to</span>\n        <Input\n          type=\"date\"\n          value={toDate}\n          onChange={this.onChangeToDate}\n          name=\"toDate\"\n          id=\"toDate\"\n        />\n        <Table striped responsive>\n          <thead>\n            <tr>\n              <th onClick={this.sort(\"auditEventDate\")}>\n                Date\n                <FontAwesomeIcon icon=\"sort\" />\n              </th>\n              <th onClick={this.sort(\"principal\")}>\n                User\n                <FontAwesomeIcon icon=\"sort\" />\n              </th>\n              <th onClick={this.sort(\"auditEventType\")}>\n                State\n                <FontAwesomeIcon icon=\"sort\" />\n              </th>\n              <th>Extra data</th>\n            </tr>\n          </thead>\n          <tbody>\n            {audits.map((audit, i) => (\n              <tr key={`audit-${i}`}>\n                <td>\n                  {\n                    <TextFormat\n                      value={audit.timestamp}\n                      type=\"date\"\n                      format={APP_TIMESTAMP_FORMAT}\n                    />\n                  }\n                </td>\n                <td>{audit.principal}</td>\n                <td>{audit.type}</td>\n                <td>\n                  {audit.data ? audit.data.message : null}\n                  {audit.data ? audit.data.remoteAddress : null}\n                </td>\n              </tr>\n            ))}\n          </tbody>\n        </Table>\n        <Row className=\"justify-content-center\">\n          <JhiPagination\n            items={getPaginationItemsNumber(\n              totalItems,\n              this.state.itemsPerPage\n            )}\n            activePage={this.state.activePage}\n            onSelect={this.handlePagination}\n            maxButtons={5}\n          />\n        </Row>\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = (storeState: IRootState) => ({\n  audits: storeState.administration.audits,\n  totalItems: storeState.administration.totalItems\n});\n\nconst mapDispatchToProps = { getAudits };\n\ntype StateProps = ReturnType<typeof mapStateToProps>;\ntype DispatchProps = typeof mapDispatchToProps;\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(AuditsPage);\n","import React from \"react\";\nimport { connect } from \"react-redux\";\nimport { Table, Input, Row, Col, Badge } from \"reactstrap\";\n\nimport {\n  getConfigurations,\n  getEnv\n} from \"app/modules/administration/administration.reducer\";\nimport { IRootState } from \"app/shared/reducers\";\n\nexport interface IConfigurationPageProps extends StateProps, DispatchProps {}\n\nexport interface IConfigurationPageState {\n  filter: string;\n  reversePrefix: boolean;\n  reverseProperties: boolean;\n}\n\nexport class ConfigurationPage extends React.Component<\n  IConfigurationPageProps,\n  IConfigurationPageState\n> {\n  state: IConfigurationPageState = {\n    filter: \"\",\n    reversePrefix: false,\n    reverseProperties: false\n  };\n\n  componentDidMount() {\n    this.props.getConfigurations();\n    this.props.getEnv();\n  }\n\n  setFilter = evt => {\n    this.setState({\n      filter: evt.target.value\n    });\n  };\n\n  envFilterFn = configProp =>\n    configProp.toUpperCase().includes(this.state.filter.toUpperCase());\n  propsFilterFn = configProp =>\n    configProp.prefix.toUpperCase().includes(this.state.filter.toUpperCase());\n\n  reversePrefix = () => {\n    this.setState({\n      reversePrefix: !this.state.reversePrefix\n    });\n  };\n\n  reverseProperties = () => {\n    this.setState({\n      reverseProperties: !this.state.reverseProperties\n    });\n  };\n\n  getContextList = contexts =>\n    Object.values(contexts)\n      .map((v: any) => v.beans)\n      .reduce((acc, e) => ({ ...acc, ...e }));\n\n  render() {\n    const { configuration } = this.props;\n    const { filter } = this.state;\n    const configProps =\n      configuration && configuration.configProps\n        ? configuration.configProps\n        : {};\n    const env = configuration && configuration.env ? configuration.env : {};\n    return (\n      <div>\n        <h2 className=\"configuration-page-heading\">Configuration</h2>\n        <span>Filter</span>{\" \"}\n        <Input\n          type=\"search\"\n          value={filter}\n          onChange={this.setFilter}\n          name=\"search\"\n          id=\"search\"\n        />\n        <label>Spring configuration</label>\n        <Table className=\"table table-striped table-bordered table-responsive d-table\">\n          <thead>\n            <tr>\n              <th onClick={this.reversePrefix}>Prefix</th>\n              <th onClick={this.reverseProperties}>Properties</th>\n            </tr>\n          </thead>\n          <tbody>\n            {configProps.contexts\n              ? Object.values(this.getContextList(configProps.contexts))\n                  .filter(this.propsFilterFn)\n                  .map((property, propIndex) => (\n                    <tr key={propIndex}>\n                      <td>{property[\"prefix\"]}</td>\n                      <td>\n                        {Object.keys(property[\"properties\"]).map(\n                          (propKey, index) => (\n                            <Row key={index}>\n                              <Col md=\"4\">{propKey}</Col>\n                              <Col md=\"8\">\n                                <Badge className=\"float-right badge-secondary break\">\n                                  {JSON.stringify(\n                                    property[\"properties\"][propKey]\n                                  )}\n                                </Badge>\n                              </Col>\n                            </Row>\n                          )\n                        )}\n                      </td>\n                    </tr>\n                  ))\n              : null}\n          </tbody>\n        </Table>\n        {env.propertySources\n          ? env.propertySources.map((envKey, envIndex) => (\n              <div key={envIndex}>\n                <h4>\n                  <span>{envKey.name}</span>\n                </h4>\n                <Table className=\"table table-sm table-striped table-bordered table-responsive d-table\">\n                  <thead>\n                    <tr key={envIndex}>\n                      <th className=\"w-40\">Property</th>\n                      <th className=\"w-60\">Value</th>\n                    </tr>\n                  </thead>\n                  <tbody>\n                    {Object.keys(envKey.properties)\n                      .filter(this.envFilterFn)\n                      .map((propKey, propIndex) => (\n                        <tr key={propIndex}>\n                          <td className=\"break\">{propKey}</td>\n                          <td className=\"break\">\n                            <span className=\"float-right badge badge-secondary break\">\n                              {envKey.properties[propKey].value}\n                            </span>\n                          </td>\n                        </tr>\n                      ))}\n                  </tbody>\n                </Table>\n              </div>\n            ))\n          : null}\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = ({ administration }: IRootState) => ({\n  configuration: administration.configuration,\n  isFetching: administration.loading\n});\n\nconst mapDispatchToProps = { getConfigurations, getEnv };\n\ntype StateProps = ReturnType<typeof mapStateToProps>;\ntype DispatchProps = typeof mapDispatchToProps;\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(ConfigurationPage);\n","import React from 'react';\n\nconst DocsPage = () => (\n  <div>\n    <iframe src=\"../swagger-ui/index.html\" width=\"100%\" height=\"800\" title=\"Swagger UI\" seamless style={{ border: 'none' }} />\n  </div>\n);\n\nexport default DocsPage;\n","import React from 'react';\nimport { Table, Modal, ModalHeader, ModalBody, ModalFooter, Button } from 'reactstrap';\n\nconst formatDiskSpaceOutput = rawValue => {\n  // Should display storage space in an human readable unit\n  const val = rawValue / 1073741824;\n  if (val > 1) {\n    // Value\n    return val.toFixed(2) + ' GB';\n  } else {\n    return (rawValue / 1048576).toFixed(2) + ' MB';\n  }\n};\n\nconst HealthModal = ({ handleClose, healthObject, showModal }) => {\n  const data = healthObject.details || {};\n  return (\n    <Modal isOpen={showModal} modalTransition={{ timeout: 20 }} backdropTransition={{ timeout: 10 }} toggle={handleClose}>\n      <ModalHeader toggle={handleClose}>{healthObject.name}</ModalHeader>\n      <ModalBody>\n        <Table bordered>\n          <thead>\n            <tr>\n              <th>Name</th>\n              <th>Value</th>\n            </tr>\n          </thead>\n          <tbody>\n            {Object.keys(data).map((key, index) => (\n              <tr key={index}>\n                <td>{key}</td>\n                <td>{healthObject.name === 'diskSpace' ? formatDiskSpaceOutput(data[key]) : JSON.stringify(data[key])}</td>\n              </tr>\n            ))}\n          </tbody>\n        </Table>\n      </ModalBody>\n      <ModalFooter>\n        <Button color=\"primary\" onClick={handleClose}>\n          Close\n        </Button>\n      </ModalFooter>\n    </Modal>\n  );\n};\n\nexport default HealthModal;\n","import React from \"react\";\nimport { connect } from \"react-redux\";\n\nimport { Table, Badge, Col, Row, Button } from \"reactstrap\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\n\nimport { IRootState } from \"app/shared/reducers\";\nimport { systemHealth } from \"app/modules/administration/administration.reducer\";\nimport HealthModal from \"app/modules/administration/health/health-modal\";\n\nexport interface IHealthPageProps extends StateProps, DispatchProps {}\n\nexport interface IHealthPageState {\n  healthObject: any;\n  showModal: boolean;\n}\n\nexport class HealthPage extends React.Component<\n  IHealthPageProps,\n  IHealthPageState\n> {\n  state: IHealthPageState = {\n    healthObject: {},\n    showModal: false\n  };\n\n  componentDidMount() {\n    this.props.systemHealth();\n  }\n\n  getSystemHealth = () => {\n    if (!this.props.isFetching) {\n      this.props.systemHealth();\n    }\n  };\n\n  getSystemHealthInfo = (name, healthObject) => () => {\n    this.setState({\n      showModal: true,\n      healthObject: {\n        ...healthObject,\n        name\n      }\n    });\n  };\n\n  handleClose = () => {\n    this.setState({\n      showModal: false\n    });\n  };\n\n  renderModal = () => {\n    const { healthObject } = this.state;\n    return (\n      <HealthModal\n        healthObject={healthObject}\n        handleClose={this.handleClose}\n        showModal={this.state.showModal}\n      />\n    );\n  };\n\n  render() {\n    const { health, isFetching } = this.props;\n    const data = (health || {}).details || {};\n    return (\n      <div>\n        <h2 className=\"health-page-heading\">Health Checks</h2>\n        <p>\n          <Button\n            onClick={this.getSystemHealth}\n            color={isFetching ? \"btn btn-danger\" : \"btn btn-primary\"}\n            disabled={isFetching}\n          >\n            <FontAwesomeIcon icon=\"sync\" />&nbsp; Refresh\n          </Button>\n        </p>\n        <Row>\n          <Col md=\"12\">\n            <Table bordered>\n              <thead>\n                <tr>\n                  <th>Service Name</th>\n                  <th>Status</th>\n                  <th>Details</th>\n                </tr>\n              </thead>\n              <tbody>\n                {Object.keys(data).map(\n                  (configPropKey, configPropIndex) =>\n                    configPropKey !== \"status\" ? (\n                      <tr key={configPropIndex}>\n                        <td>{configPropKey}</td>\n                        <td>\n                          <Badge\n                            color={\n                              data[configPropKey].status !== \"UP\"\n                                ? \"danger\"\n                                : \"success\"\n                            }\n                          >\n                            {data[configPropKey].status}\n                          </Badge>\n                        </td>\n                        <td>\n                          {data[configPropKey].details ? (\n                            <a\n                              onClick={this.getSystemHealthInfo(\n                                configPropKey,\n                                data[configPropKey]\n                              )}\n                            >\n                              <FontAwesomeIcon icon=\"eye\" />\n                            </a>\n                          ) : null}\n                        </td>\n                      </tr>\n                    ) : null\n                )}\n              </tbody>\n            </Table>\n          </Col>\n        </Row>\n        {this.renderModal()}\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = (storeState: IRootState) => ({\n  health: storeState.administration.health,\n  isFetching: storeState.administration.loading\n});\n\nconst mapDispatchToProps = { systemHealth };\n\ntype StateProps = ReturnType<typeof mapStateToProps>;\ntype DispatchProps = typeof mapDispatchToProps;\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(HealthPage);\n","import React from \"react\";\n\nimport ErrorBoundaryRoute from \"app/shared/error/error-boundary-route\";\nimport UserManagement from \"app/modules/administration/user-management\";\nimport Logs from \"app/modules/administration/logs/logs\";\nimport Health from \"app/modules/administration/health/health\";\nimport Metrics from \"app/modules/administration/metrics/metrics\";\nimport Configuration from \"app/modules/administration/configuration/configuration\";\nimport Audits from \"app/modules/administration/audits/audits\";\nimport Docs from \"app/modules/administration/docs/docs\";\n\nconst Routes = ({ match }) => (\n  <div>\n    <ErrorBoundaryRoute\n      path={`${match.url}/user-management`}\n      component={UserManagement}\n    />\n    <ErrorBoundaryRoute exact path={`${match.url}/health`} component={Health} />\n    <ErrorBoundaryRoute\n      exact\n      path={`${match.url}/metrics`}\n      component={Metrics}\n    />\n    <ErrorBoundaryRoute exact path={`${match.url}/docs`} component={Docs} />\n    <ErrorBoundaryRoute\n      exact\n      path={`${match.url}/configuration`}\n      component={Configuration}\n    />\n    <ErrorBoundaryRoute exact path={`${match.url}/audits`} component={Audits} />\n    <ErrorBoundaryRoute exact path={`${match.url}/logs`} component={Logs} />\n  </div>\n);\n\nexport default Routes;\n","import React from \"react\";\nimport { connect } from \"react-redux\";\n\nimport {\n  getLoggers,\n  changeLogLevel\n} from \"app/modules/administration/administration.reducer\";\nimport { IRootState } from \"app/shared/reducers\";\n\nexport interface ILogsPageProps extends StateProps, DispatchProps {}\n\nexport interface ILogsPageState {\n  filter: string;\n}\n\nexport class LogsPage extends React.Component<ILogsPageProps, ILogsPageState> {\n  state: ILogsPageState = {\n    filter: \"\"\n  };\n\n  componentDidMount() {\n    this.props.getLoggers();\n  }\n\n  getLogs = () => {\n    if (!this.props.isFetching) {\n      this.props.getLoggers();\n    }\n  };\n\n  changeLevel = (loggerName, level) => () => {\n    this.props.changeLogLevel(loggerName, level);\n  };\n\n  setFilter = evt => {\n    this.setState({\n      filter: evt.target.value\n    });\n  };\n\n  getClassName = (level, check, className) =>\n    level === check ? `btn btn-sm btn-${className}` : \"btn btn-sm btn-light\";\n\n  filterFn = l =>\n    l.name.toUpperCase().includes(this.state.filter.toUpperCase());\n\n  render() {\n    const { logs, isFetching } = this.props;\n    const { filter } = this.state;\n    const loggers = logs ? logs.loggers : [];\n    return (\n      <div>\n        <h2 className=\"logs-page-heading\">Logs</h2>\n        <p>There are {loggers.length.toString()} loggers.</p>\n\n        <span>Filter</span>\n        <input\n          type=\"text\"\n          value={filter}\n          onChange={this.setFilter}\n          className=\"form-control\"\n          disabled={isFetching}\n        />\n\n        <table className=\"table table-sm table-striped table-bordered\">\n          <thead>\n            <tr title=\"click to order\">\n              <th>\n                <span>Name</span>\n              </th>\n              <th>\n                <span>Level</span>\n              </th>\n            </tr>\n          </thead>\n          <tbody>\n            {loggers.filter(this.filterFn).map((logger, i) => (\n              <tr key={`log-row-${i}`}>\n                <td>\n                  <small>{logger.name}</small>\n                </td>\n                <td>\n                  <button\n                    disabled={isFetching}\n                    onClick={this.changeLevel(logger.name, \"TRACE\")}\n                    className={this.getClassName(\n                      logger.level,\n                      \"TRACE\",\n                      \"primary\"\n                    )}\n                  >\n                    TRACE\n                  </button>\n                  <button\n                    disabled={isFetching}\n                    onClick={this.changeLevel(logger.name, \"DEBUG\")}\n                    className={this.getClassName(\n                      logger.level,\n                      \"DEBUG\",\n                      \"success\"\n                    )}\n                  >\n                    DEBUG\n                  </button>\n                  <button\n                    disabled={isFetching}\n                    onClick={this.changeLevel(logger.name, \"INFO\")}\n                    className={this.getClassName(logger.level, \"INFO\", \"info\")}\n                  >\n                    INFO\n                  </button>\n                  <button\n                    disabled={isFetching}\n                    onClick={this.changeLevel(logger.name, \"WARN\")}\n                    className={this.getClassName(\n                      logger.level,\n                      \"WARN\",\n                      \"warning\"\n                    )}\n                  >\n                    WARN\n                  </button>\n                  <button\n                    disabled={isFetching}\n                    onClick={this.changeLevel(logger.name, \"ERROR\")}\n                    className={this.getClassName(\n                      logger.level,\n                      \"ERROR\",\n                      \"danger\"\n                    )}\n                  >\n                    ERROR\n                  </button>\n                  <button\n                    disabled={isFetching}\n                    onClick={this.changeLevel(logger.name, \"OFF\")}\n                    className={this.getClassName(\n                      logger.level,\n                      \"OFF\",\n                      \"secondary\"\n                    )}\n                  >\n                    OFF\n                  </button>\n                </td>\n              </tr>\n            ))}\n          </tbody>\n        </table>\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = ({ administration }: IRootState) => ({\n  logs: administration.logs,\n  isFetching: administration.loading\n});\n\nconst mapDispatchToProps = { getLoggers, changeLogLevel };\n\ntype StateProps = ReturnType<typeof mapStateToProps>;\ntype DispatchProps = typeof mapDispatchToProps;\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(LogsPage);\n","import React from \"react\";\nimport {\n  Table,\n  Modal,\n  ModalHeader,\n  ModalBody,\n  ModalFooter,\n  Button,\n  Input,\n  Badge,\n  Row\n} from \"reactstrap\";\n\nimport ThreadItem from \"app/modules/administration/metrics/thread-item\";\n\nexport interface IMetricsModalProps {\n  showModal: boolean;\n  handleClose: Function;\n  threadDump: any;\n}\n\nexport interface IMetricsModalState {\n  badgeFilter: string;\n  searchFilter: string;\n}\n\nexport class MetricsModal extends React.Component<\n  IMetricsModalProps,\n  IMetricsModalState\n> {\n  state: IMetricsModalState = {\n    badgeFilter: \"\",\n    searchFilter: \"\"\n  };\n\n  computeFilteredList = () => {\n    const { badgeFilter, searchFilter } = this.state;\n    let filteredList = this.props.threadDump.threads;\n    if (badgeFilter !== \"\") {\n      filteredList = filteredList.filter(t => t.threadState === badgeFilter);\n    }\n    if (searchFilter !== \"\") {\n      filteredList = filteredList.filter(\n        t =>\n          t.lockName &&\n          t.lockName.toLowerCase().includes(searchFilter.toLowerCase())\n      );\n    }\n    return filteredList;\n  };\n\n  computeCounters = () => {\n    let threadDumpAll = 0;\n    let threadDumpRunnable = 0;\n    let threadDumpWaiting = 0;\n    let threadDumpTimedWaiting = 0;\n    let threadDumpBlocked = 0;\n\n    this.props.threadDump.threads.forEach(t => {\n      switch (t.threadState) {\n        case \"RUNNABLE\":\n          threadDumpRunnable++;\n          break;\n        case \"WAITING\":\n          threadDumpWaiting++;\n          break;\n        case \"TIMED_WAITING\":\n          threadDumpTimedWaiting++;\n          break;\n        case \"BLOCKED\":\n          threadDumpBlocked++;\n          break;\n        default:\n          break;\n      }\n    });\n\n    threadDumpAll =\n      threadDumpRunnable +\n      threadDumpWaiting +\n      threadDumpTimedWaiting +\n      threadDumpBlocked;\n    return {\n      threadDumpAll,\n      threadDumpRunnable,\n      threadDumpWaiting,\n      threadDumpTimedWaiting,\n      threadDumpBlocked\n    };\n  };\n\n  getBadgeClass = threadState => {\n    if (threadState === \"RUNNABLE\") {\n      return \"badge-success\";\n    } else if (threadState === \"WAITING\") {\n      return \"badge-info\";\n    } else if (threadState === \"TIMED_WAITING\") {\n      return \"badge-warning\";\n    } else if (threadState === \"BLOCKED\") {\n      return \"badge-danger\";\n    }\n  };\n\n  updateBadgeFilter = badge => () => this.setState({ badgeFilter: badge });\n\n  updateSearchFilter = event =>\n    this.setState({ searchFilter: event.target.value });\n\n  render() {\n    const { showModal, handleClose, threadDump } = this.props;\n    let counters = {} as any;\n    let filteredList = null;\n    if (threadDump && threadDump.threads) {\n      counters = this.computeCounters();\n      filteredList = this.computeFilteredList();\n    }\n\n    return (\n      <Modal isOpen={showModal} toggle={handleClose} className=\"modal-lg\">\n        <ModalHeader toggle={handleClose}>Threads dump</ModalHeader>\n        <ModalBody>\n          <Badge\n            color=\"primary\"\n            className=\"hand\"\n            onClick={this.updateBadgeFilter(\"\")}\n          >\n            All&nbsp;\n            <Badge pill>{counters.threadDumpAll || 0}</Badge>\n          </Badge>&nbsp;\n          <Badge\n            color=\"success\"\n            className=\"hand\"\n            onClick={this.updateBadgeFilter(\"RUNNABLE\")}\n          >\n            Runnable&nbsp;\n            <Badge pill>{counters.threadDumpRunnable || 0}</Badge>\n          </Badge>&nbsp;\n          <Badge\n            color=\"info\"\n            className=\"hand\"\n            onClick={this.updateBadgeFilter(\"WAITING\")}\n          >\n            Waiting&nbsp;\n            <Badge pill>{counters.threadDumpWaiting || 0}</Badge>\n          </Badge>&nbsp;\n          <Badge\n            color=\"warning\"\n            className=\"hand\"\n            onClick={this.updateBadgeFilter(\"TIMED_WAITING\")}\n          >\n            Timed Waiting&nbsp;\n            <Badge pill>{counters.threadDumpTimedWaiting || 0}</Badge>\n          </Badge>&nbsp;\n          <Badge\n            color=\"danger\"\n            className=\"hand\"\n            onClick={this.updateBadgeFilter(\"BLOCKED\")}\n          >\n            Blocked&nbsp;\n            <Badge pill>{counters.threadDumpBlocked || 0}</Badge>\n          </Badge>&nbsp;\n          <div className=\"mt-2\">&nbsp;</div>\n          <Input\n            type=\"text\"\n            className=\"form-control\"\n            placeholder=\"Filter by Lock Name...\"\n            onChange={this.updateSearchFilter}\n          />\n          <div style={{ padding: \"10px\" }}>\n            {filteredList\n              ? filteredList.map((threadDumpInfo, i) => (\n                  <div key={`dump-${i}`}>\n                    <h6>\n                      {\" \"}\n                      <span\n                        className={\n                          \"badge \" +\n                          this.getBadgeClass(threadDumpInfo.threadState)\n                        }\n                      >\n                        {threadDumpInfo.threadState}\n                      </span>&nbsp;\n                      {threadDumpInfo.threadName} (ID {threadDumpInfo.threadId})&nbsp;\n                    </h6>\n                    <ThreadItem threadDumpInfo={threadDumpInfo} />\n                    <Row>\n                      <Table responsive>\n                        <thead>\n                          <tr>\n                            <th>Blocked Time</th>\n                            <th>Blocked Count</th>\n                            <th>Waited Time</th>\n                            <th>Waited Count</th>\n                            <th>Lock Name</th>\n                          </tr>\n                        </thead>\n                        <tbody>\n                          <tr key={threadDumpInfo.lockName}>\n                            <td>{threadDumpInfo.blockedTime}</td>\n                            <td>{threadDumpInfo.blockedCount}</td>\n                            <td>{threadDumpInfo.waitedTime}</td>\n                            <td>{threadDumpInfo.waitedCount}</td>\n                            <td\n                              className=\"thread-dump-modal-lock\"\n                              title={threadDumpInfo.lockName}\n                            >\n                              <code>{threadDumpInfo.lockName}</code>\n                            </td>\n                          </tr>\n                        </tbody>\n                      </Table>\n                    </Row>\n                  </div>\n                ))\n              : null}\n          </div>\n        </ModalBody>\n        <ModalFooter>\n          <Button color=\"primary\" onClick={handleClose}>\n            Close\n          </Button>\n        </ModalFooter>\n      </Modal>\n    );\n  }\n}\n\nexport default MetricsModal;\n","import React from \"react\";\nimport { connect } from \"react-redux\";\nimport { Table, Progress, Col, Row, Button } from \"reactstrap\";\nimport { TextFormat } from \"react-jhipster\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\n\nimport {\n  APP_WHOLE_NUMBER_FORMAT,\n  APP_TWO_DIGITS_AFTER_POINT_NUMBER_FORMAT\n} from \"app/config/constants\";\nimport {\n  systemMetrics,\n  systemThreadDump\n} from \"app/modules/administration/administration.reducer\";\nimport MetricsModal from \"app/modules/administration/metrics/metrics-modal\";\nimport { IRootState } from \"app/shared/reducers\";\n\nexport interface IMetricsPageProps extends StateProps, DispatchProps {}\n\nexport interface IMetricsPageState {\n  showModal: boolean;\n}\n\nexport class MetricsPage extends React.Component<\n  IMetricsPageProps,\n  IMetricsPageState\n> {\n  state: IMetricsPageState = {\n    showModal: false\n  };\n\n  componentDidMount() {\n    this.props.systemMetrics();\n  }\n\n  getMetrics = () => {\n    if (!this.props.isFetching) {\n      this.props.systemMetrics();\n    }\n  };\n\n  getThreadDump = () => {\n    this.props.systemThreadDump();\n    this.setState({\n      showModal: true\n    });\n  };\n\n  handleClose = () => {\n    this.setState({\n      showModal: false\n    });\n  };\n\n  filterNaN = input => (isNaN(input) ? 0 : input);\n\n  getStats = metrics => {\n    const stat = {\n      servicesStats: {},\n      cachesStats: {}\n    };\n    if (!this.props.isFetching && metrics && metrics.timers) {\n      Object.keys(metrics.timers).forEach((key, indexNm) => {\n        if (key.indexOf(\"web.rest\") !== -1 || key.indexOf(\"service\") !== -1) {\n          stat.servicesStats[key] = metrics.timers[key];\n        }\n        if (key.indexOf(\"net.sf.ehcache.Cache\") !== -1) {\n          // remove gets or puts\n          const index = key.lastIndexOf(\".\");\n          const newKey = key.substr(0, index);\n          // Keep the name of the domain\n          stat.cachesStats[newKey] = {\n            name: newKey,\n            value: metrics.timers[key]\n          };\n        }\n      });\n    }\n    return stat;\n  };\n\n  gaugeRow = (metrics, label: String, key) =>\n    metrics.gauges[key] ? (\n      <Row>\n        <Col md=\"9\">{label}</Col>\n        <Col md=\"3\" className=\"text-right\">\n          {metrics.gauges[key].value}\n        </Col>\n      </Row>\n    ) : null;\n\n  renderModal = () => (\n    <MetricsModal\n      handleClose={this.handleClose}\n      showModal={this.state.showModal}\n      threadDump={this.props.threadDump}\n    />\n  );\n\n  renderGauges = metrics => (\n    <Row>\n      <Col sm=\"12\">\n        <h3>JVM Metrics</h3>\n        <Row>\n          <Col md=\"4\">\n            <b>Memory</b>\n            <p>\n              <span>Total Memory</span> (\n              <TextFormat\n                value={metrics.gauges[\"jvm.memory.total.used\"].value / 1048576}\n                type=\"number\"\n                format={APP_WHOLE_NUMBER_FORMAT}\n              />\n              M /{\" \"}\n              <TextFormat\n                value={metrics.gauges[\"jvm.memory.total.max\"].value / 1048576}\n                type=\"number\"\n                format={APP_WHOLE_NUMBER_FORMAT}\n              />\n              M)\n            </p>\n            <Progress\n              animated\n              value={metrics.gauges[\"jvm.memory.total.used\"].value}\n              min=\"0\"\n              max={metrics.gauges[\"jvm.memory.total.max\"].value}\n              color=\"success\"\n            >\n              <span>\n                <TextFormat\n                  value={\n                    (metrics.gauges[\"jvm.memory.total.used\"].value * 100) /\n                    metrics.gauges[\"jvm.memory.total.max\"].value\n                  }\n                  type=\"number\"\n                  format={APP_WHOLE_NUMBER_FORMAT}\n                />\n                %\n              </span>\n            </Progress>\n            <p>\n              <span>Heap Memory</span> (\n              <TextFormat\n                value={metrics.gauges[\"jvm.memory.heap.used\"].value / 1048576}\n                type=\"number\"\n                format={APP_WHOLE_NUMBER_FORMAT}\n              />\n              M /{\" \"}\n              <TextFormat\n                value={metrics.gauges[\"jvm.memory.heap.max\"].value / 1048576}\n                type=\"number\"\n                format={APP_WHOLE_NUMBER_FORMAT}\n              />\n              M)\n            </p>\n            <Progress\n              animated\n              min=\"0\"\n              max={metrics.gauges[\"jvm.memory.heap.max\"].value}\n              value={metrics.gauges[\"jvm.memory.heap.used\"].value}\n              color=\"success\"\n            >\n              <span>\n                <TextFormat\n                  value={\n                    (metrics.gauges[\"jvm.memory.heap.used\"].value * 100) /\n                    metrics.gauges[\"jvm.memory.heap.max\"].value\n                  }\n                  type=\"number\"\n                  format={APP_WHOLE_NUMBER_FORMAT}\n                />\n                %\n              </span>\n            </Progress>\n\n            <p>\n              <span>Non-Heap Memory</span> (\n              <TextFormat\n                value={\n                  metrics.gauges[\"jvm.memory.non-heap.used\"].value / 1048576\n                }\n                type=\"number\"\n                format={APP_WHOLE_NUMBER_FORMAT}\n              />\n              M /{\" \"}\n              <TextFormat\n                value={\n                  metrics.gauges[\"jvm.memory.non-heap.committed\"].value /\n                  1048576\n                }\n                type=\"number\"\n                format={APP_WHOLE_NUMBER_FORMAT}\n              />\n              M)\n            </p>\n            <Progress\n              animated\n              min=\"0\"\n              max={metrics.gauges[\"jvm.memory.non-heap.committed\"].value}\n              value={metrics.gauges[\"jvm.memory.non-heap.used\"].value}\n              color=\"success\"\n            >\n              <span>\n                <TextFormat\n                  value={\n                    (metrics.gauges[\"jvm.memory.non-heap.used\"].value * 100) /\n                    metrics.gauges[\"jvm.memory.non-heap.committed\"].value\n                  }\n                  type=\"number\"\n                  format={APP_WHOLE_NUMBER_FORMAT}\n                />\n                %\n              </span>\n            </Progress>\n          </Col>\n          <Col md=\"4\">\n            <b>Threads</b> (Total: {metrics.gauges[\"jvm.threads.count\"].value}){\" \"}\n            <Button color=\"link\" className=\"hand\" onClick={this.getThreadDump}>\n              <FontAwesomeIcon icon=\"eye\" />\n            </Button>\n            <p>\n              <span>Runnable</span>{\" \"}\n              {metrics.gauges[\"jvm.threads.runnable.count\"].value}\n            </p>\n            <Progress\n              animated\n              min=\"0\"\n              value={metrics.gauges[\"jvm.threads.runnable.count\"].value}\n              max={metrics.gauges[\"jvm.threads.count\"].value}\n              color=\"success\"\n            >\n              <span>\n                <TextFormat\n                  value={\n                    (metrics.gauges[\"jvm.threads.runnable.count\"].value * 100) /\n                    metrics.gauges[\"jvm.threads.count\"].value\n                  }\n                  type=\"number\"\n                  format={APP_WHOLE_NUMBER_FORMAT}\n                />\n                %\n              </span>\n            </Progress>\n            <p>\n              <span>Timed Waiting</span> ({\n                metrics.gauges[\"jvm.threads.timed_waiting.count\"].value\n              })\n            </p>\n            <Progress\n              animated\n              min=\"0\"\n              value={metrics.gauges[\"jvm.threads.timed_waiting.count\"].value}\n              max={metrics.gauges[\"jvm.threads.count\"].value}\n              color=\"warning\"\n            >\n              <span>\n                <TextFormat\n                  value={\n                    (metrics.gauges[\"jvm.threads.timed_waiting.count\"].value *\n                      100) /\n                    metrics.gauges[\"jvm.threads.count\"].value\n                  }\n                  type=\"number\"\n                  format={APP_WHOLE_NUMBER_FORMAT}\n                />\n                %\n              </span>\n            </Progress>\n            <p>\n              <span>Waiting</span> ({\n                metrics.gauges[\"jvm.threads.waiting.count\"].value\n              })\n            </p>\n            <Progress\n              animated\n              min=\"0\"\n              value={metrics.gauges[\"jvm.threads.waiting.count\"].value}\n              max={metrics.gauges[\"jvm.threads.count\"].value}\n              color=\"warning\"\n            >\n              <span>\n                <TextFormat\n                  value={\n                    (metrics.gauges[\"jvm.threads.waiting.count\"].value * 100) /\n                    metrics.gauges[\"jvm.threads.count\"].value\n                  }\n                  type=\"number\"\n                  format={APP_WHOLE_NUMBER_FORMAT}\n                />\n                %\n              </span>\n            </Progress>\n            <p>\n              <span>Blocked</span> ({\n                metrics.gauges[\"jvm.threads.blocked.count\"].value\n              })\n            </p>\n            <Progress\n              animated\n              min=\"0\"\n              value={metrics.gauges[\"jvm.threads.blocked.count\"].value}\n              max={metrics.gauges[\"jvm.threads.count\"].value}\n              color=\"success\"\n            >\n              <span>\n                <TextFormat\n                  value={\n                    (metrics.gauges[\"jvm.threads.blocked.count\"].value * 100) /\n                    metrics.gauges[\"jvm.threads.count\"].value\n                  }\n                  type=\"number\"\n                  format={APP_WHOLE_NUMBER_FORMAT}\n                />\n                %\n              </span>\n            </Progress>\n          </Col>\n          <Col md=\"4\">\n            <b>Garbage collections</b>\n            {this.gaugeRow(\n              metrics,\n              \"Mark Sweep count\",\n              \"jvm.garbage.PS-MarkSweep.count\"\n            )}\n            {this.gaugeRow(\n              metrics,\n              \"Mark Sweep time\",\n              \"jvm.garbage.PS-MarkSweep.time\"\n            )}\n            {this.gaugeRow(\n              metrics,\n              \"Scavenge count\",\n              \"jvm.garbage.PS-Scavenge.count\"\n            )}\n            {this.gaugeRow(\n              metrics,\n              \"Scavenge time\",\n              \"jvm.garbage.PS-Scavenge.time\"\n            )}\n          </Col>\n        </Row>\n      </Col>\n    </Row>\n  );\n\n  render() {\n    const { metrics, isFetching } = this.props;\n    const data = metrics || {};\n    const { servicesStats, cachesStats } = this.getStats(data);\n    return (\n      <div>\n        <h2 className=\"metrics-page-heading\">Application Metrics</h2>\n        <p>\n          <Button\n            onClick={this.getMetrics}\n            color={isFetching ? \"btn btn-danger\" : \"btn btn-primary\"}\n            disabled={isFetching}\n          >\n            <FontAwesomeIcon icon=\"sync\" />&nbsp; Refresh\n          </Button>\n        </p>\n        <hr />\n        {metrics.gauges ? this.renderGauges(metrics) : \"\"}\n\n        {metrics.meters && metrics.timers ? (\n          <Row>\n            <Col sm=\"12\">\n              <h3>HTTP requests (events per second)</h3>\n              <p>\n                <span>Active requests:</span>{\" \"}\n                <b>\n                  <TextFormat\n                    value={\n                      metrics.counters[\n                        \"com.codahale.metrics.servlet.InstrumentedFilter.activeRequests\"\n                      ].count\n                    }\n                    type=\"number\"\n                    format={APP_WHOLE_NUMBER_FORMAT}\n                  />\n                </b>{\" \"}\n                - <span>Total requests:</span>{\" \"}\n                <b>\n                  <TextFormat\n                    value={\n                      metrics.timers[\n                        \"com.codahale.metrics.servlet.InstrumentedFilter.requests\"\n                      ].count\n                    }\n                    type=\"number\"\n                    format={APP_WHOLE_NUMBER_FORMAT}\n                  />\n                </b>\n              </p>\n              <Table>\n                <thead>\n                  <tr>\n                    <th>Code</th>\n                    <th>Count</th>\n                    <th className=\"text-right\">Mean</th>\n                    <th className=\"text-right\">\n                      <span>Average</span> (1 min)\n                    </th>\n                    <th className=\"text-right\">\n                      <span>Average</span> (5 min)\n                    </th>\n                    <th className=\"text-right\">\n                      <span>Average</span> (15 min)\n                    </th>\n                  </tr>\n                </thead>\n                <tbody>\n                  <tr key={0}>\n                    <td>OK</td>\n                    <td>\n                      <Progress\n                        min=\"0\"\n                        max={\n                          metrics.timers[\n                            \"com.codahale.metrics.servlet.InstrumentedFilter.requests\"\n                          ].count\n                        }\n                        value={\n                          metrics.meters[\n                            \"com.codahale.metrics.servlet.InstrumentedFilter.responseCodes.ok\"\n                          ].count\n                        }\n                        color=\"success\"\n                        animated\n                      />\n                    </td>\n                    <td className=\"text-right\">\n                      <TextFormat\n                        value={this.filterNaN(\n                          metrics.meters[\n                            \"com.codahale.metrics.servlet.InstrumentedFilter.responseCodes.ok\"\n                          ].mean_rate\n                        )}\n                        type=\"number\"\n                        format={APP_TWO_DIGITS_AFTER_POINT_NUMBER_FORMAT}\n                      />\n                    </td>\n                    <td className=\"text-right\">\n                      <TextFormat\n                        value={this.filterNaN(\n                          metrics.meters[\n                            \"com.codahale.metrics.servlet.InstrumentedFilter.responseCodes.ok\"\n                          ].m1_rate\n                        )}\n                        type=\"number\"\n                        format={APP_TWO_DIGITS_AFTER_POINT_NUMBER_FORMAT}\n                      />\n                    </td>\n                    <td className=\"text-right\">\n                      <TextFormat\n                        value={this.filterNaN(\n                          metrics.meters[\n                            \"com.codahale.metrics.servlet.InstrumentedFilter.responseCodes.ok\"\n                          ].m5_rate\n                        )}\n                        type=\"number\"\n                        format={APP_TWO_DIGITS_AFTER_POINT_NUMBER_FORMAT}\n                      />\n                    </td>\n                    <td className=\"text-right\">\n                      <TextFormat\n                        value={this.filterNaN(\n                          metrics.meters[\n                            \"com.codahale.metrics.servlet.InstrumentedFilter.responseCodes.ok\"\n                          ].m15_rate\n                        )}\n                        type=\"number\"\n                        format={APP_TWO_DIGITS_AFTER_POINT_NUMBER_FORMAT}\n                      />\n                    </td>\n                  </tr>\n                  <tr key={1}>\n                    <td>Not Found</td>\n                    <td>\n                      <Progress\n                        min=\"0\"\n                        max={\n                          metrics.timers[\n                            \"com.codahale.metrics.servlet.InstrumentedFilter.requests\"\n                          ].count\n                        }\n                        value={\n                          metrics.meters[\n                            \"com.codahale.metrics.servlet.InstrumentedFilter.responseCodes.notFound\"\n                          ].count\n                        }\n                        color=\"success\"\n                        animated\n                      />\n                    </td>\n                    <td className=\"text-right\">\n                      <TextFormat\n                        value={this.filterNaN(\n                          metrics.meters[\n                            \"com.codahale.metrics.servlet.InstrumentedFilter.responseCodes.notFound\"\n                          ].mean_rate\n                        )}\n                        type=\"number\"\n                        format={APP_TWO_DIGITS_AFTER_POINT_NUMBER_FORMAT}\n                      />\n                    </td>\n                    <td className=\"text-right\">\n                      <TextFormat\n                        value={this.filterNaN(\n                          metrics.meters[\n                            \"com.codahale.metrics.servlet.InstrumentedFilter.responseCodes.notFound\"\n                          ].m1_rate\n                        )}\n                        type=\"number\"\n                        format={APP_TWO_DIGITS_AFTER_POINT_NUMBER_FORMAT}\n                      />\n                    </td>\n                    <td className=\"text-right\">\n                      <TextFormat\n                        value={this.filterNaN(\n                          metrics.meters[\n                            \"com.codahale.metrics.servlet.InstrumentedFilter.responseCodes.notFound\"\n                          ].m5_rate\n                        )}\n                        type=\"number\"\n                        format={APP_TWO_DIGITS_AFTER_POINT_NUMBER_FORMAT}\n                      />\n                    </td>\n                    <td className=\"text-right\">\n                      <TextFormat\n                        value={this.filterNaN(\n                          metrics.meters[\n                            \"com.codahale.metrics.servlet.InstrumentedFilter.responseCodes.notFound\"\n                          ].m15_rate\n                        )}\n                        type=\"number\"\n                        format={APP_TWO_DIGITS_AFTER_POINT_NUMBER_FORMAT}\n                      />\n                    </td>\n                  </tr>\n                  <tr key={2}>\n                    <td>Server Error</td>\n                    <td>\n                      <Progress\n                        min=\"0\"\n                        max={\n                          metrics.timers[\n                            \"com.codahale.metrics.servlet.InstrumentedFilter.requests\"\n                          ].count\n                        }\n                        value={\n                          metrics.meters[\n                            \"com.codahale.metrics.servlet.InstrumentedFilter.responseCodes.serverError\"\n                          ].count\n                        }\n                        color=\"success\"\n                        animated\n                      />\n                    </td>\n                    <td className=\"text-right\">\n                      <TextFormat\n                        value={this.filterNaN(\n                          metrics.meters[\n                            \"com.codahale.metrics.servlet.InstrumentedFilter.responseCodes.serverError\"\n                          ].mean_rate\n                        )}\n                        type=\"number\"\n                        format={APP_TWO_DIGITS_AFTER_POINT_NUMBER_FORMAT}\n                      />\n                    </td>\n                    <td className=\"text-right\">\n                      <TextFormat\n                        value={this.filterNaN(\n                          metrics.meters[\n                            \"com.codahale.metrics.servlet.InstrumentedFilter.responseCodes.serverError\"\n                          ].m1_rate\n                        )}\n                        type=\"number\"\n                        format={APP_TWO_DIGITS_AFTER_POINT_NUMBER_FORMAT}\n                      />\n                    </td>\n                    <td className=\"text-right\">\n                      <TextFormat\n                        value={this.filterNaN(\n                          metrics.meters[\n                            \"com.codahale.metrics.servlet.InstrumentedFilter.responseCodes.serverError\"\n                          ].m5_rate\n                        )}\n                        type=\"number\"\n                        format={APP_TWO_DIGITS_AFTER_POINT_NUMBER_FORMAT}\n                      />\n                    </td>\n                    <td className=\"text-right\">\n                      <TextFormat\n                        value={this.filterNaN(\n                          metrics.meters[\n                            \"com.codahale.metrics.servlet.InstrumentedFilter.responseCodes.serverError\"\n                          ].m15_rate\n                        )}\n                        type=\"number\"\n                        format={APP_TWO_DIGITS_AFTER_POINT_NUMBER_FORMAT}\n                      />\n                    </td>\n                  </tr>\n                </tbody>\n              </Table>\n            </Col>\n          </Row>\n        ) : (\n          \"\"\n        )}\n        {servicesStats ? (\n          <Row>\n            <Col sm=\"12\">\n              <h3>Services statistics (time in millisecond)</h3>\n            </Col>\n            <Table>\n              <thead>\n                <tr>\n                  <th>Service name</th>\n                  <th>Count</th>\n                  <th>Mean</th>\n                  <th>Min</th>\n                  <th>p50</th>\n                  <th>p75</th>\n                  <th>p95</th>\n                  <th>p99</th>\n                  <th>Max</th>\n                </tr>\n              </thead>\n              <tbody>\n                {Object.keys(servicesStats).map((key, index) => (\n                  <tr key={key}>\n                    <td>{key}</td>\n                    <td>{servicesStats[key].count}</td>\n                    <td>\n                      <TextFormat\n                        value={servicesStats[key].mean * 1024}\n                        type=\"number\"\n                        format={APP_WHOLE_NUMBER_FORMAT}\n                      />\n                    </td>\n                    <td>\n                      <TextFormat\n                        value={servicesStats[key].min * 1024}\n                        type=\"number\"\n                        format={APP_WHOLE_NUMBER_FORMAT}\n                      />\n                    </td>\n                    <td>\n                      <TextFormat\n                        value={servicesStats[key].p50 * 1024}\n                        type=\"number\"\n                        format={APP_WHOLE_NUMBER_FORMAT}\n                      />\n                    </td>\n                    <td>\n                      <TextFormat\n                        value={servicesStats[key].p75 * 1024}\n                        type=\"number\"\n                        format={APP_WHOLE_NUMBER_FORMAT}\n                      />\n                    </td>\n                    <td>\n                      <TextFormat\n                        value={servicesStats[key].p95 * 1024}\n                        type=\"number\"\n                        format={APP_WHOLE_NUMBER_FORMAT}\n                      />\n                    </td>\n                    <td>\n                      <TextFormat\n                        value={servicesStats[key].p99 * 1024}\n                        type=\"number\"\n                        format={APP_WHOLE_NUMBER_FORMAT}\n                      />\n                    </td>\n                    <td>\n                      <TextFormat\n                        value={servicesStats[key].max * 1024}\n                        type=\"number\"\n                        format={APP_WHOLE_NUMBER_FORMAT}\n                      />\n                    </td>\n                  </tr>\n                ))}\n              </tbody>\n            </Table>\n          </Row>\n        ) : (\n          \"\"\n        )}\n\n        {cachesStats ? (\n          <Row>\n            <Col sm=\"12\">\n              <h3>Ehcache statistics</h3>\n              <Table>\n                <thead>\n                  <tr>\n                    <th>Cache Name</th>\n                    <th>Object</th>\n                    <th>Misses</th>\n                    <th>Eviction Count</th>\n                  </tr>\n                </thead>\n                <tbody>\n                  {Object.keys(cachesStats).map((k, v) => (\n                    <tr key={k}>\n                      <td>{k}</td>\n                      <td>{metrics.gauges[`${k}.objects`].value}</td>\n                      <td>{metrics.gauges[`${k}.hits`].value}</td>\n                      <td>{metrics.gauges[`${k}.misses`].value}</td>\n                      <td>{metrics.gauges[`${k}.eviction-count`].value}</td>\n                    </tr>\n                  ))}\n                </tbody>\n              </Table>\n            </Col>\n          </Row>\n        ) : (\n          \"\"\n        )}\n\n        {metrics.gauges &&\n        metrics.gauges[\"HikariPool-1.pool.TotalConnections\"] &&\n        metrics.gauges[\"HikariPool-1.pool.TotalConnections\"].value > 0 ? (\n          <Row>\n            <Col sm=\"12\">\n              <h3>DataSource statistics (time in millisecond)</h3>\n              <Table>\n                <thead>\n                  <tr>\n                    <th>\n                      <span>Usage</span>\n                      ({\n                        metrics.gauges[\"HikariPool-1.pool.ActiveConnections\"]\n                          .value\n                      }{\" \"}\n                      /{\" \"}\n                      {\n                        metrics.gauges[\"HikariPool-1.pool.TotalConnections\"]\n                          .value\n                      })\n                    </th>\n                    <th className=\"text-right\">Count</th>\n                    <th className=\"text-right\">Mean</th>\n                    <th className=\"text-right\">Min</th>\n                    <th className=\"text-right\">p50</th>\n                    <th className=\"text-right\">p75</th>\n                    <th className=\"text-right\">p95</th>\n                    <th className=\"text-right\">p99</th>\n                    <th className=\"text-right\">Max</th>\n                  </tr>\n                </thead>\n                <tbody>\n                  <tr key=\"DB\">\n                    <td>\n                      <Progress\n                        min=\"0\"\n                        max={\n                          metrics.gauges[\"HikariPool-1.pool.TotalConnections\"]\n                            .value\n                        }\n                        value={\n                          metrics.gauges[\"HikariPool-1.pool.ActiveConnections\"]\n                            .value\n                        }\n                      >\n                        <span>\n                          <TextFormat\n                            value={\n                              (metrics.gauges[\n                                \"HikariPool-1.pool.ActiveConnections\"\n                              ].value *\n                                100) /\n                              metrics.gauges[\n                                \"HikariPool-1.pool.TotalConnections\"\n                              ].value\n                            }\n                            type=\"number\"\n                            format={APP_WHOLE_NUMBER_FORMAT}\n                          />\n                          %\n                        </span>\n                      </Progress>\n                    </td>\n                    <td className=\"text-right\">\n                      {metrics.histograms[\"HikariPool-1.pool.Usage\"].count}\n                    </td>\n                    <td className=\"text-right\">\n                      <TextFormat\n                        value={this.filterNaN(\n                          metrics.histograms[\"HikariPool-1.pool.Usage\"].mean\n                        )}\n                        type=\"number\"\n                        format={APP_TWO_DIGITS_AFTER_POINT_NUMBER_FORMAT}\n                      />\n                    </td>\n                    <td className=\"text-right\">\n                      <TextFormat\n                        value={this.filterNaN(\n                          metrics.histograms[\"HikariPool-1.pool.Usage\"].min\n                        )}\n                        type=\"number\"\n                        format={APP_TWO_DIGITS_AFTER_POINT_NUMBER_FORMAT}\n                      />\n                    </td>\n                    <td className=\"text-right\">\n                      <TextFormat\n                        value={this.filterNaN(\n                          metrics.histograms[\"HikariPool-1.pool.Usage\"].p50\n                        )}\n                        type=\"number\"\n                        format={APP_TWO_DIGITS_AFTER_POINT_NUMBER_FORMAT}\n                      />\n                    </td>\n                    <td className=\"text-right\">\n                      <TextFormat\n                        value={this.filterNaN(\n                          metrics.histograms[\"HikariPool-1.pool.Usage\"].p75\n                        )}\n                        type=\"number\"\n                        format={APP_TWO_DIGITS_AFTER_POINT_NUMBER_FORMAT}\n                      />\n                    </td>\n                    <td className=\"text-right\">\n                      <TextFormat\n                        value={this.filterNaN(\n                          metrics.histograms[\"HikariPool-1.pool.Usage\"].p95\n                        )}\n                        type=\"number\"\n                        format={APP_TWO_DIGITS_AFTER_POINT_NUMBER_FORMAT}\n                      />\n                    </td>\n                    <td className=\"text-right\">\n                      <TextFormat\n                        value={this.filterNaN(\n                          metrics.histograms[\"HikariPool-1.pool.Usage\"].p99\n                        )}\n                        type=\"number\"\n                        format={APP_TWO_DIGITS_AFTER_POINT_NUMBER_FORMAT}\n                      />\n                    </td>\n                    <td className=\"text-right\">\n                      <TextFormat\n                        value={this.filterNaN(\n                          metrics.histograms[\"HikariPool-1.pool.Usage\"].max\n                        )}\n                        type=\"number\"\n                        format={APP_TWO_DIGITS_AFTER_POINT_NUMBER_FORMAT}\n                      />\n                    </td>\n                  </tr>\n                </tbody>\n              </Table>\n            </Col>\n          </Row>\n        ) : (\n          \"\"\n        )}\n\n        {this.renderModal()}\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = (storeState: IRootState) => ({\n  metrics: storeState.administration.metrics,\n  isFetching: storeState.administration.loading,\n  threadDump: storeState.administration.threadDump\n});\n\nconst mapDispatchToProps = { systemMetrics, systemThreadDump };\n\ntype StateProps = ReturnType<typeof mapStateToProps>;\ntype DispatchProps = typeof mapDispatchToProps;\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(MetricsPage);\n","import React from 'react';\nimport { Collapse, Card, CardBody, Row } from 'reactstrap';\n\nexport interface IThreadItemProps {\n  threadDumpInfo: any;\n}\n\nexport interface IThreadItemState {\n  collapse: boolean;\n}\n\nexport class ThreadItem extends React.Component<IThreadItemProps, IThreadItemState> {\n  state: IThreadItemState = {\n    collapse: false\n  };\n\n  toggleStackTrace = () => {\n    this.setState({\n      collapse: !this.state.collapse\n    });\n  };\n\n  render() {\n    const { threadDumpInfo } = this.props;\n\n    return (\n      <div>\n        <a onClick={this.toggleStackTrace} style={{ color: 'hotpink' }}>\n          {this.state.collapse ? <span>Hide StackTrace</span> : <span>Show StackTrace</span>}\n        </a>\n        <Collapse isOpen={this.state.collapse}>\n          <Card>\n            <CardBody>\n              <Row className=\"break\" style={{ overflowX: 'scroll' }}>\n                {Object.entries(threadDumpInfo.stackTrace).map(([stK, stV]: [string, any]) => (\n                  <samp key={`detail-${stK}`}>\n                    {stV.className}.{stV.methodName}\n                    <code>\n                      ({stV.fileName}:{stV.lineNumber})\n                    </code>\n                  </samp>\n                ))}\n                <span className=\"mt-1\" />\n              </Row>\n            </CardBody>\n          </Card>\n        </Collapse>\n      </div>\n    );\n  }\n}\n\nexport default ThreadItem;\n","import React from \"react\";\nimport { Switch } from \"react-router-dom\";\n\nimport ErrorBoundaryRoute from \"app/shared/error/error-boundary-route\";\nimport UserManagement from \"app/modules/administration/user-management/user-management\";\nimport UserManagementDetail from \"app/modules/administration/user-management/user-management-detail\";\nimport UserManagementUpdate from \"app/modules/administration/user-management/user-management-update\";\nimport UserManagementDeleteDialog from \"app/modules/administration/user-management/user-management-delete-dialog\";\n\nconst Routes = ({ match }) => (\n  <>\n    <Switch>\n      <ErrorBoundaryRoute\n        exact\n        path={`${match.url}/new`}\n        component={UserManagementUpdate}\n      />\n      <ErrorBoundaryRoute\n        exact\n        path={`${match.url}/:login/edit`}\n        component={UserManagementUpdate}\n      />\n      <ErrorBoundaryRoute\n        exact\n        path={`${match.url}/:login`}\n        component={UserManagementDetail}\n      />\n      <ErrorBoundaryRoute path={match.url} component={UserManagement} />\n    </Switch>\n    <ErrorBoundaryRoute\n      path={`${match.url}/:login/delete`}\n      component={UserManagementDeleteDialog}\n    />\n  </>\n);\n\nexport default Routes;\n","import React from \"react\";\nimport { connect } from \"react-redux\";\nimport { RouteComponentProps } from \"react-router-dom\";\nimport { Modal, ModalHeader, ModalBody, ModalFooter, Button } from \"reactstrap\";\nimport { ICrudGetAction, ICrudDeleteAction } from \"react-jhipster\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\n\nimport { IUser } from \"app/shared/model/user.model\";\nimport {\n  getUser,\n  deleteUser\n} from \"app/modules/administration/user-management/user-management.reducer\";\nimport { IRootState } from \"app/shared/reducers\";\n\nexport interface IUserManagementDeleteDialogProps\n  extends StateProps,\n    DispatchProps,\n    RouteComponentProps<{ login: string }> {}\n\nexport class UserManagementDeleteDialog extends React.Component<\n  IUserManagementDeleteDialogProps\n> {\n  componentDidMount() {\n    this.props.getUser(this.props.match.params.login);\n  }\n\n  confirmDelete = event => {\n    this.props.deleteUser(this.props.user.login);\n    this.handleClose(event);\n  };\n\n  handleClose = event => {\n    event.stopPropagation();\n    this.props.history.goBack();\n  };\n\n  render() {\n    const { user } = this.props;\n    return (\n      <Modal isOpen toggle={this.handleClose}>\n        <ModalHeader toggle={this.handleClose}>\n          Confirm delete operation\n        </ModalHeader>\n        <ModalBody>Are you sure you want to delete this User?</ModalBody>\n        <ModalFooter>\n          <Button color=\"secondary\" onClick={this.handleClose}>\n            <FontAwesomeIcon icon=\"ban\" />&nbsp; Cancel\n          </Button>\n          <Button color=\"danger\" onClick={this.confirmDelete}>\n            <FontAwesomeIcon icon=\"trash\" />&nbsp; Delete\n          </Button>\n        </ModalFooter>\n      </Modal>\n    );\n  }\n}\n\nconst mapStateToProps = (storeState: IRootState) => ({\n  user: storeState.userManagement.user\n});\n\nconst mapDispatchToProps = { getUser, deleteUser };\n\ntype StateProps = ReturnType<typeof mapStateToProps>;\ntype DispatchProps = typeof mapDispatchToProps;\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(UserManagementDeleteDialog);\n","import React from \"react\";\nimport { connect } from \"react-redux\";\nimport { Link, RouteComponentProps } from \"react-router-dom\";\nimport { Button, Row, Badge } from \"reactstrap\";\nimport { ICrudGetAction, TextFormat } from \"react-jhipster\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\n\nimport { APP_DATE_FORMAT } from \"app/config/constants\";\nimport { IUser } from \"app/shared/model/user.model\";\nimport { getUser } from \"app/modules/administration/user-management/user-management.reducer\";\nimport { IRootState } from \"app/shared/reducers\";\n\nexport interface IUserManagementDetailProps\n  extends StateProps,\n    DispatchProps,\n    RouteComponentProps<{ login: string }> {}\n\nexport class UserManagementDetail extends React.Component<\n  IUserManagementDetailProps\n> {\n  componentDidMount() {\n    this.props.getUser(this.props.match.params.login);\n  }\n\n  render() {\n    const { user } = this.props;\n    return (\n      <div>\n        <h2>\n          User [<b>{user.login}</b>]\n        </h2>\n        <Row size=\"md\">\n          <dl className=\"jh-entity-details\">\n            <dt>Login</dt>\n            <dd>\n              <span>{user.login}</span>&nbsp;\n              {user.activated ? (\n                <Badge color=\"success\">Activated</Badge>\n              ) : (\n                <Badge color=\"danger\">Deactivated</Badge>\n              )}\n            </dd>\n            <dt>First Name</dt>\n            <dd>{user.firstName}</dd>\n            <dt>Last Name</dt>\n            <dd>{user.lastName}</dd>\n            <dt>Email</dt>\n            <dd>{user.email}</dd>\n            <dt>Created By</dt>\n            <dd>{user.createdBy}</dd>\n            <dt>Created Date</dt>\n            <dd>\n              <TextFormat\n                value={user.createdDate}\n                type=\"date\"\n                format={APP_DATE_FORMAT}\n                blankOnInvalid\n              />\n            </dd>\n            <dt>Last Modified By</dt>\n            <dd>{user.lastModifiedBy}</dd>\n            <dt>Last Modified Date</dt>\n            <dd>\n              <TextFormat\n                value={user.lastModifiedDate}\n                type=\"date\"\n                format={APP_DATE_FORMAT}\n                blankOnInvalid\n              />\n            </dd>\n            <dt>Profiles</dt>\n            <dd>\n              <ul className=\"list-unstyled\">\n                {user.authorities\n                  ? user.authorities.map((authority, i) => (\n                      <li key={`user-auth-${i}`}>\n                        <Badge color=\"info\">{authority}</Badge>\n                      </li>\n                    ))\n                  : null}\n              </ul>\n            </dd>\n          </dl>\n        </Row>\n        <Button tag={Link} to=\"/admin/user-management\" replace color=\"info\">\n          <FontAwesomeIcon icon=\"arrow-left\" />{\" \"}\n          <span className=\"d-none d-md-inline\">Back</span>\n        </Button>\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = (storeState: IRootState) => ({\n  user: storeState.userManagement.user\n});\n\nconst mapDispatchToProps = { getUser };\n\ntype StateProps = ReturnType<typeof mapStateToProps>;\ntype DispatchProps = typeof mapDispatchToProps;\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(UserManagementDetail);\n","import React from \"react\";\nimport { connect } from \"react-redux\";\nimport { Link, RouteComponentProps } from \"react-router-dom\";\nimport { Button, Label, Row, Col } from \"reactstrap\";\nimport {\n  AvForm,\n  AvGroup,\n  AvInput,\n  AvField,\n  AvFeedback\n} from \"availity-reactstrap-validation\";\nimport {\n  ICrudGetAction,\n  ICrudGetAllAction,\n  ICrudPutAction\n} from \"react-jhipster\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\n\nimport { IUser } from \"app/shared/model/user.model\";\nimport {\n  getUser,\n  getRoles,\n  updateUser,\n  createUser,\n  reset\n} from \"app/modules/administration/user-management/user-management.reducer\";\nimport { IRootState } from \"app/shared/reducers\";\n\nexport interface IUserManagementUpdateProps\n  extends StateProps,\n    DispatchProps,\n    RouteComponentProps<{ login: string }> {}\n\nexport interface IUserManagementUpdateState {\n  isNew: boolean;\n}\n\nexport class UserManagementUpdate extends React.Component<\n  IUserManagementUpdateProps,\n  IUserManagementUpdateState\n> {\n  state: IUserManagementUpdateState = {\n    isNew: !this.props.match.params || !this.props.match.params.login\n  };\n\n  componentDidMount() {\n    !this.state.isNew && this.props.getUser(this.props.match.params.login);\n    this.props.getRoles();\n  }\n\n  componentWillUnmount() {\n    this.props.reset();\n  }\n\n  saveUser = (event, values) => {\n    if (this.state.isNew) {\n      this.props.createUser(values);\n    } else {\n      this.props.updateUser(values);\n    }\n    this.handleClose();\n  };\n\n  handleClose = () => {\n    this.props.history.push(\"/admin/user-management\");\n  };\n\n  render() {\n    const isInvalid = false;\n    const { user, loading, updating, roles } = this.props;\n    const { isNew } = this.state;\n    return (\n      <div>\n        <Row className=\"justify-content-center\">\n          <Col md=\"8\">\n            <h1>Create or edit a User</h1>\n          </Col>\n        </Row>\n        <Row className=\"justify-content-center\">\n          <Col md=\"8\">\n            {loading ? (\n              <p>Loading...</p>\n            ) : (\n              <AvForm onValidSubmit={this.saveUser}>\n                {user.id ? (\n                  <AvGroup>\n                    <Label for=\"id\">ID</Label>\n                    <AvField\n                      type=\"text\"\n                      className=\"form-control\"\n                      name=\"id\"\n                      required\n                      readOnly\n                      value={user.id}\n                    />\n                  </AvGroup>\n                ) : null}\n                <AvGroup>\n                  <Label for=\"login\">Login</Label>\n                  <AvField\n                    type=\"text\"\n                    className=\"form-control\"\n                    name=\"login\"\n                    validate={{\n                      required: {\n                        value: true,\n                        errorMessage: \"Your username is required.\"\n                      },\n                      pattern: {\n                        value: \"^[_.@A-Za-z0-9-]*$\",\n                        errorMessage:\n                          \"Your username can only contain letters and digits.\"\n                      },\n                      minLength: {\n                        value: 1,\n                        errorMessage:\n                          \"Your username is required to be at least 1 character.\"\n                      },\n                      maxLength: {\n                        value: 50,\n                        errorMessage:\n                          \"Your username cannot be longer than 50 characters.\"\n                      }\n                    }}\n                    value={user.login}\n                  />\n                </AvGroup>\n                <AvGroup>\n                  <Label for=\"firstName\">First Name</Label>\n                  <AvField\n                    type=\"text\"\n                    className=\"form-control\"\n                    name=\"firstName\"\n                    validate={{\n                      maxLength: {\n                        value: 50,\n                        errorMessage:\n                          \"This field cannot be longer than {{ max }} characters.\"\n                      }\n                    }}\n                    value={user.firstName}\n                  />\n                </AvGroup>\n                <AvGroup>\n                  <Label for=\"lastName\">Last Name</Label>\n                  <AvField\n                    type=\"text\"\n                    className=\"form-control\"\n                    name=\"lastName\"\n                    validate={{\n                      maxLength: {\n                        value: 50,\n                        errorMessage:\n                          \"This field cannot be longer than {{ max }} characters.\"\n                      }\n                    }}\n                    value={user.lastName}\n                  />\n                  <AvFeedback>\n                    This field cannot be longer than 50 characters.\n                  </AvFeedback>\n                </AvGroup>\n                <AvGroup>\n                  <AvField\n                    name=\"email\"\n                    label=\"Email\"\n                    placeholder=\"Your email\"\n                    type=\"email\"\n                    validate={{\n                      required: {\n                        value: true,\n                        errorMessage: \"Your email is required.\"\n                      },\n                      email: {\n                        errorMessage: \"Your email is invalid.\"\n                      },\n                      minLength: {\n                        value: 5,\n                        errorMessage:\n                          \"Your email is required to be at least 5 characters.\"\n                      },\n                      maxLength: {\n                        value: 254,\n                        errorMessage:\n                          \"Your email cannot be longer than 50 characters.\"\n                      }\n                    }}\n                    value={user.email}\n                  />\n                </AvGroup>\n                <AvGroup check>\n                  <Label>\n                    <AvInput\n                      type=\"checkbox\"\n                      name=\"activated\"\n                      value={user.activated}\n                    />{\" \"}\n                    Activated\n                  </Label>\n                </AvGroup>\n                <AvGroup>\n                  <Label for=\"authorities\">Language Key</Label>\n                  <AvInput\n                    type=\"select\"\n                    className=\"form-control\"\n                    name=\"authorities\"\n                    value={user.authorities}\n                    multiple\n                  >\n                    {roles.map(role => (\n                      <option value={role} key={role}>\n                        {role}\n                      </option>\n                    ))}\n                  </AvInput>\n                </AvGroup>\n                <Button\n                  tag={Link}\n                  to=\"/admin/user-management\"\n                  replace\n                  color=\"info\"\n                >\n                  <FontAwesomeIcon icon=\"arrow-left\" />&nbsp;\n                  <span className=\"d-none d-md-inline\">Back</span>\n                </Button>\n                &nbsp;\n                <Button\n                  color=\"primary\"\n                  type=\"submit\"\n                  disabled={isInvalid || updating}\n                >\n                  <FontAwesomeIcon icon=\"save\" />&nbsp; Save\n                </Button>\n              </AvForm>\n            )}\n          </Col>\n        </Row>\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = (storeState: IRootState) => ({\n  user: storeState.userManagement.user,\n  roles: storeState.userManagement.authorities,\n  loading: storeState.userManagement.loading,\n  updating: storeState.userManagement.updating\n});\n\nconst mapDispatchToProps = { getUser, getRoles, updateUser, createUser, reset };\n\ntype StateProps = ReturnType<typeof mapStateToProps>;\ntype DispatchProps = typeof mapDispatchToProps;\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(UserManagementUpdate);\n","import React from \"react\";\nimport { connect } from \"react-redux\";\nimport { Link, RouteComponentProps } from \"react-router-dom\";\nimport { Button, Table, Row, Badge } from \"reactstrap\";\nimport {\n  ICrudGetAllAction,\n  ICrudPutAction,\n  TextFormat,\n  JhiPagination,\n  getPaginationItemsNumber,\n  getSortState,\n  IPaginationBaseState\n} from \"react-jhipster\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\n\nimport { APP_DATE_FORMAT } from \"app/config/constants\";\nimport { ITEMS_PER_PAGE } from \"app/shared/util/pagination.constants\";\nimport {\n  getUsers,\n  updateUser\n} from \"app/modules/administration/user-management/user-management.reducer\";\nimport { IRootState } from \"app/shared/reducers\";\n\nexport interface IUserManagementProps\n  extends StateProps,\n    DispatchProps,\n    RouteComponentProps<{}> {}\n\nexport class UserManagement extends React.Component<\n  IUserManagementProps,\n  IPaginationBaseState\n> {\n  state: IPaginationBaseState = {\n    ...getSortState(this.props.location, ITEMS_PER_PAGE)\n  };\n\n  componentDidMount() {\n    this.getUsers();\n  }\n\n  sort = prop => () => {\n    this.setState(\n      {\n        order: this.state.order === \"asc\" ? \"desc\" : \"asc\",\n        sort: prop\n      },\n      () => this.sortUsers()\n    );\n  };\n\n  sortUsers() {\n    this.getUsers();\n    this.props.history.push(\n      `${this.props.location.pathname}?page=${this.state.activePage}&sort=${\n        this.state.sort\n      },${this.state.order}`\n    );\n  }\n\n  handlePagination = activePage =>\n    this.setState({ activePage }, () => this.sortUsers());\n\n  getUsers = () => {\n    const { activePage, itemsPerPage, sort, order } = this.state;\n    this.props.getUsers(activePage - 1, itemsPerPage, `${sort},${order}`);\n  };\n\n  toggleActive = user => () => {\n    this.props.updateUser({\n      ...user,\n      activated: !user.activated\n    });\n  };\n\n  render() {\n    const { users, account, match, totalItems } = this.props;\n    return (\n      <div>\n        <h2 className=\"userManagement-page-heading\">\n          Users\n          <Link\n            to={`${match.url}/new`}\n            className=\"btn btn-primary float-right jh-create-entity\"\n          >\n            <FontAwesomeIcon icon=\"plus\" /> Create a new user\n          </Link>\n        </h2>\n        <Table responsive striped>\n          <thead>\n            <tr>\n              <th className=\"hand\" onClick={this.sort(\"id\")}>\n                ID<FontAwesomeIcon icon=\"sort\" />\n              </th>\n              <th className=\"hand\" onClick={this.sort(\"login\")}>\n                Login<FontAwesomeIcon icon=\"sort\" />\n              </th>\n              <th className=\"hand\" onClick={this.sort(\"email\")}>\n                Email<FontAwesomeIcon icon=\"sort\" />\n              </th>\n              <th />\n              <th>Profiles</th>\n              <th className=\"hand\" onClick={this.sort(\"createdDate\")}>\n                Created Date<FontAwesomeIcon icon=\"sort\" />\n              </th>\n              <th className=\"hand\" onClick={this.sort(\"lastModifiedBy\")}>\n                Last Modified By<FontAwesomeIcon icon=\"sort\" />\n              </th>\n              <th className=\"hand\" onClick={this.sort(\"lastModifiedDate\")}>\n                Last Modified Date<FontAwesomeIcon icon=\"sort\" />\n              </th>\n              <th />\n            </tr>\n          </thead>\n          <tbody>\n            {users.map((user, i) => (\n              <tr id={user.login} key={`user-${i}`}>\n                <td>\n                  <Button\n                    tag={Link}\n                    to={`${match.url}/${user.login}`}\n                    color=\"link\"\n                    size=\"sm\"\n                  >\n                    {user.id}\n                  </Button>\n                </td>\n                <td>{user.login}</td>\n                <td>{user.email}</td>\n                <td>\n                  {user.activated ? (\n                    <Button color=\"success\" onClick={this.toggleActive(user)}>\n                      Activated\n                    </Button>\n                  ) : (\n                    <Button color=\"danger\" onClick={this.toggleActive(user)}>\n                      Deactivated\n                    </Button>\n                  )}\n                </td>\n                <td>\n                  {user.authorities\n                    ? user.authorities.map((authority, j) => (\n                        <div key={`user-auth-${i}-${j}`}>\n                          <Badge color=\"info\">{authority}</Badge>\n                        </div>\n                      ))\n                    : null}\n                </td>\n                <td>\n                  <TextFormat\n                    value={user.createdDate}\n                    type=\"date\"\n                    format={APP_DATE_FORMAT}\n                    blankOnInvalid\n                  />\n                </td>\n                <td>{user.lastModifiedBy}</td>\n                <td>\n                  <TextFormat\n                    value={user.lastModifiedDate}\n                    type=\"date\"\n                    format={APP_DATE_FORMAT}\n                    blankOnInvalid\n                  />\n                </td>\n                <td className=\"text-right\">\n                  <div className=\"btn-group flex-btn-group-container\">\n                    <Button\n                      tag={Link}\n                      to={`${match.url}/${user.login}`}\n                      color=\"info\"\n                      size=\"sm\"\n                    >\n                      <FontAwesomeIcon icon=\"eye\" />{\" \"}\n                      <span className=\"d-none d-md-inline\">View</span>\n                    </Button>\n                    <Button\n                      tag={Link}\n                      to={`${match.url}/${user.login}/edit`}\n                      color=\"primary\"\n                      size=\"sm\"\n                    >\n                      <FontAwesomeIcon icon=\"pencil-alt\" />{\" \"}\n                      <span className=\"d-none d-md-inline\">Edit</span>\n                    </Button>\n                    <Button\n                      tag={Link}\n                      to={`${match.url}/${user.login}/delete`}\n                      color=\"danger\"\n                      size=\"sm\"\n                      disabled={account.login === user.login}\n                    >\n                      <FontAwesomeIcon icon=\"trash\" />{\" \"}\n                      <span className=\"d-none d-md-inline\">Delete</span>\n                    </Button>\n                  </div>\n                </td>\n              </tr>\n            ))}\n          </tbody>\n        </Table>\n        <Row className=\"justify-content-center\">\n          <JhiPagination\n            items={getPaginationItemsNumber(\n              totalItems,\n              this.state.itemsPerPage\n            )}\n            activePage={this.state.activePage}\n            onSelect={this.handlePagination}\n            maxButtons={5}\n          />\n        </Row>\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = (storeState: IRootState) => ({\n  users: storeState.userManagement.users,\n  totalItems: storeState.userManagement.totalItems,\n  account: storeState.authentication.account\n});\n\nconst mapDispatchToProps = { getUsers, updateUser };\n\ntype StateProps = ReturnType<typeof mapStateToProps>;\ntype DispatchProps = typeof mapDispatchToProps;\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(UserManagement);\n","export const ITEMS_PER_PAGE = 20;\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AAEA;AACA;AAOA;AAEA;AACA;AAGA;AAYA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAAA;AAAA;AAAA;AAIA;AAUA;AACA;AAEA;AACA;AAGA;AACA;AACA;AAEA;AACA;AAGA;AAEA;AACA;AAEA;AACA;AACA;AAGA;AAEA;AACA;AACA;AAKA;AAEA;AACA;AAAA;AAEA;AACA;AAQA;AAOA;;AA8EA;AAzIA;AACA;AACA;AA2DA;AACA;AACA;AACA;AAEA;AACA;AACA;AAOA;AACA;AAOA;AACA;AACA;AACA;;AAEA;AAEA;;AAEA;AAEA;;AAEA;AAEA;AAGA;AAGA;AASA;AACA;AACA;AACA;AACA;AAMA;AACA;AAYA;AACA;AAAA;;AAEA;AACA;AACA;AACA;AAEA;AAKA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;AC/MA;AACA;AACA;AAEA;AAcA;AAAA;AAAA;AAAA;AAIA;AACA;AACA;AACA;AACA;AAOA;AACA;AACA;AACA;AACA;AAEA;AACA;AAAA;AACA;AACA;AAAA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAFA;;AA6FA;AA1HA;AACA;AACA;AACA;AA8BA;AAAA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AAAA;AACA;AAOA;AACA;AACA;AACA;AACA;AACA;AAGA;AAEA;AACA;AACA;AAEA;AACA;AAIA;AACA;AACA;AAYA;AAGA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AAGA;AAEA;AACA;AAEA;AACA;AACA;AAUA;AAGA;AACA;AAAA;;AAEA;AAAA;AAAA;AACA;AACA;AACA;AAHA;AAKA;AAKA;AACA;AACA;;;;;;;;;;;;;;ACpKA;AAAA;AAAA;AAAA;AAEA;AAEA;AAIA;AACA;AACA;;;;;;;;;;;;;;ACVA;AAAA;AAAA;AAAA;AAAA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAEA;AAAA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AAGA;AACA;AAMA;AACA;AAMA;AAEA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;AChDA;AACA;AAEA;AACA;AAGA;AACA;AASA;AAAA;AAAA;AAAA;AAIA;AACA;AACA;AACA;AAMA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAIA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAOA;;AAmEA;AAtGA;AACA;AACA;AAmCA;AAAA;AACA;AACA;AACA;AAEA;AACA;AACA;AAKA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AAGA;AAEA;AACA;AACA;AAGA;AACA;AAMA;AAQA;AAtBA;AAiCA;AAGA;AACA;AAAA;;AAEA;AACA;AACA;AACA;AAEA;AAKA;AACA;AACA;;;;;;;;;;;;;;AC9IA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAAA;AAAA;AAEA;AAIA;AACA;AAKA;AACA;AAKA;AACA;AAnBA;AAuBA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;ACpCA;AACA;AAEA;AAYA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAMA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AAAA;AAEA;AACA;AAAA;;AA4GA;AApIA;AACA;AACA;AAwBA;AAAA;AACA;AACA;AACA;AACA;AAEA;AACA;;AAAA;AAAA;AAEA;AACA;AAQA;AACA;AACA;AACA;AACA;AAEA;AACA;AAIA;AAGA;AACA;AAEA;AACA;AAWA;AAWA;AAOA;AAWA;AAWA;AAkBA;AACA;AAAA;;AAEA;AAAA;AAAA;AACA;AACA;AACA;AAHA;AAKA;AAKA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;ACtKA;AACA;AAYA;AAaA;AAAA;AAAA;AAAA;AAIA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AADA;AAGA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AACA;AAEA;AAEA;AACA;AAAA;;AAuHA;AArHA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;;AAMA;;AAEA;;AAMA;;AAEA;;AAMA;;AAEA;;AAMA;;AAEA;;AAMA;;AAEA;AACA;AAMA;AAEA;AAEA;AACA;AACA;AAGA;;AAKA;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AAIA;AAQA;AAGA;AACA;AAMA;AACA;AAAA;;AAEA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACrOA;AACA;AACA;AACA;AACA;AAEA;AAIA;AAIA;AASA;AAAA;AAAA;AAAA;AAIA;AACA;AACA;AAMA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAHA;AASA;AAQA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;;AAKA;AACA;AAMA;AACA;AAOA;AACA;AAGA;AAMA;AAEA;AACA;;AACA;;AAKA;AACA;AAMA;AACA;AAOA;AACA;AAGA;AAMA;AAGA;AACA;;AACA;;AAOA;AACA;AAGA;AAMA;AACA;AAOA;AACA;AAGA;AAMA;AAGA;AACA;;AAAA;;AAAA;AACA;AACA;AAEA;AACA;AAAA;AACA;AAEA;AAOA;AACA;AAGA;AAMA;AAEA;AACA;;AACA;AAEA;AACA;AAOA;AACA;AAGA;AACA;AAMA;AAEA;AACA;;AACA;AAEA;AACA;AAOA;AACA;AAGA;AAMA;AAEA;AACA;;AACA;AAEA;AACA;AAOA;AACA;AAGA;AAMA;AAGA;AACA;AACA;AAKA;AAKA;AAKA;;AAohBA;AAn0BA;AACA;AACA;AAwTA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAKA;AACA;AAEA;AACA;AAEA;AAEA;AACA;AACA;AACA;AAAA;AACA;AACA;AASA;;AACA;AAAA;AACA;AACA;AAWA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AAgBA;AACA;AAUA;AACA;AAUA;AACA;AAUA;AACA;AAWA;AACA;AACA;AACA;AAgBA;AACA;AAUA;AACA;AAUA;AACA;AAUA;AACA;AAWA;AACA;AACA;AACA;AAgBA;AACA;AAUA;AACA;AAUA;AACA;AAUA;AACA;AAkBA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AAGA;AACA;AACA;AACA;AAMA;AACA;AAMA;AACA;AAMA;AACA;AAMA;AACA;AAMA;AACA;AAMA;AACA;AAeA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AAGA;AACA;AACA;AACA;AACA;AAWA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AAIA;AAIA;AAGA;AACA;AAKA;AACA;AAQA;AAGA;AAGA;AACA;AAQA;AACA;AAQA;AACA;AAQA;AACA;AAQA;AACA;AAQA;AACA;AAQA;AACA;AAiBA;AAGA;AACA;AAAA;;AAEA;AACA;AACA;AACA;AACA;AAEA;AAKA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;ACj3BA;AACA;AAUA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;;AA8BA;AA5BA;AACA;AAEA;AAEA;AAGA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAEA;;AAAA;AACA;;AACA;;AAAA;AACA;AALA;AAQA;AAOA;AACA;AAAA;;AAEA;AACA;AACA;;;;;;;;;;;;;;ACtDA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AAAA;AAAA;AAEA;AACA;AAKA;AAKA;AAKA;AAEA;AApBA;AA2BA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;ACtCA;AACA;AAEA;AAEA;AAGA;AAWA;AAAA;AAAA;AAAA;AAOA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;;AAqBA;AAjCA;AACA;AACA;AAYA;AACA;AACA;AAEA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAIA;AACA;AAAA;;AAEA;AACA;AACA;AAEA;AAKA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACpEA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AAQA;AAAA;AAAA;;AA0EA;AAvEA;AACA;AACA;AAEA;AACA;AACA;AAEA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAOA;AACA;AACA;AACA;AACA;AAOA;AACA;AACA;AAEA;AAEA;AAGA;AAKA;AACA;AAAA;AACA;AAIA;AACA;AAAA;;AAEA;AACA;AACA;AAEA;AAKA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;ACxGA;AACA;AACA;AACA;AACA;AAYA;AAGA;AAkBA;AAAA;AAAA;AAAA;AAIA;AACA;AACA;AAWA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;;AA+KA;AAnMA;AACA;AACA;AACA;AAEA;AACA;AACA;AAeA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAGA;AACA;AAKA;AAEA;AACA;AAUA;AACA;AACA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AAIA;AACA;AACA;AAKA;AACA;AACA;AAEA;AACA;AAIA;AACA;AACA;AAKA;AACA;AACA;AAEA;AACA;AAGA;AAIA;AACA;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AAIA;AACA;AACA;AAIA;AAEA;AAEA;AACA;AACA;AAcA;AAMA;;AACA;;AAGA;AAKA;AACA;AAOA;AACA;AAAA;;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AAKA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AChQA;AACA;AACA;AACA;AACA;AASA;AAEA;AACA;AACA;AAWA;AAAA;AAAA;AAAA;AAIA;AAQA;AACA;AAEA;AACA;AACA;AAGA;AAWA;AACA;AAAA;AAEA;AACA;AACA;AACA;AAEA;AACA;AAIA;;AA+IA;AAnLA;AACA;AACA;AAYA;AACA;AACA;AAKA;AAiBA;AAAA;AACA;AACA;AAEA;;AAEA;AAIA;AACA;AAEA;AACA;AACA;AACA;;AACA;AAEA;;AACA;AAEA;;AACA;AAEA;AACA;AACA;;AACA;AAEA;;AACA;AAEA;;AACA;AAEA;AAGA;AAGA;AACA;AASA;AACA;AACA;AAWA;AAEA;AAEA;AAGA;AAEA;AACA;AAOA;AACA;AACA;AAOA;AACA;AACA;AAMA;AAAA;AACA;AAEA;AAMA;AAAA;AACA;AAEA;AAOA;AAAA;AACA;AAQA;AACA;AAYA;AACA;AAAA;;AAEA;AACA;AACA;AACA;AACA;AAEA;AAKA;AACA;AACA;;;;;;;;;;;;;;ACtOA;AAAA;AAAA;AACA;AACA;;;;;;A","sourceRoot":""}